" .vimrc
" by Miika Nissi, https://miikanissi.com, https://github.com/miikanissi
" language specific configs at .vim/ftplugin/<language>.vim
" or .vim/after/syntax/<language>.vim for syntax

" PLUGIN MANAGER {{{
if ! filereadable(system('echo -n "$HOME/.vim/autoload/plug.vim"'))
  echo "Downloading junegunn/vim-plug to manage plugins..."
  silent !mkdir -p $HOME/.vim/autoload/
  silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > $HOME/.vim/autoload/plug.vim
  autocmd VimEnter * PlugInstall
endif
call plug#begin('$HOME/.vim/plugged')
Plug 'chriskempson/base16-vim'
Plug 'tpope/vim-commentary'
Plug 'ap/vim-css-color'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'vim-python/python-syntax', { 'for': 'python' }
Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
call plug#end()
"}}}
" BASICS{{{
highlight ColorColumn ctermbg=0 guibg=lightgrey
colorscheme base16-tomorrow-night
" set runtimepath to current dir
let $RTP=split(&runtimepath, ',')[0]
let $RC="$HOME/.vim/vimrc"
" marker based folding in vim files
autocmd FileType vim setlocal foldmethod=marker
" settings
set encoding=utf-8              " utf-8 always
filetype plugin indent on       " indentation on
syntax on                       " syntax highlighting on
set t_Co=256                    " use 256 colors
set mouse=a                     " enable mouse functionality
set noeb vb t_vb=               " no error bells
set backspace=indent,eol,start  " normal backspace functionality
set hidden                      " hides instead of unloads buffers
set path=.,**                   " path is cur file and dir
set wildmenu                    " tab complete shows all matching files
set nocompatible                " compatibility vim only
set clipboard=unnamedplus       " uses system clipboard
set noerrorbells                " no error bells
set tabstop=4                   " tab stops at 4 spaces
set softtabstop=4               " tab stops at 4 spaces
set shiftwidth=4                " default shift
set expandtab                   " default tabs
set smartindent                 " default tabs
set autoindent                  " indents paste
set nu rnu                      " hybrid line numbers
set wrap                        " no wrap
set ignorecase                  " ignores case in search
set smartcase                   " uses smartcase in search
set noswapfile                  " no swap file
set nobackup                    " no backup file
set incsearch                   " incremental search enabled
set ruler                       " ruler shows cur pos
set modelines=0                 " no modelines
set colorcolumn=80              " colorcolumn is 80
set lazyredraw                  " no redraw
set magic                       " magic for regex
set scrolloff=5                 " shows 5 lines under mouse
set matchpairs+=<:>             " highlights matching brackets, '%' to jump between them
set viminfo='100,<9999,s100     " only stores info from 100 files at a time, 9999 lot.
set laststatus=2                " allows lightline to show
set noshowmode                  " -- INSERT -- is not shown as lightline shows it
let skip_defaults_vim=1         " disable viminfo
set viminfo=""                  " disable viminfo
set showcmd                     " shows the typed command
set cmdheight=2                 " more space for command
set foldmethod=indent           " enable folding
set foldlevel=99                " never folded
set updatetime=300              " default is 4000
set shortmess+=c                " no messages to ins completion
set signcolumn=yes              " always show signcolumns
"}}}
" KEY MAPPINGS{{{
" leader as comma
let mapleader = ","
" show buffers
" nnoremap <leader>b :buffers<CR>:buffer<Space>
" indent file
nnoremap <leader>i gg=G<C-o><C-o>
" toggle folding
nnoremap <space> za
" snippets
nnoremap <leader>html :-1read $HOME/.vim/snippets/skeleton.html<CR>5jwf>a
nnoremap <leader>tpy :-1read $HOME/.vim/snippets/skeleton_tawasta_models.py<CR>:35<CR>wi
nnoremap <leader>tmd :-1read $HOME/.vim/snippets/skeleton_tawasta_README.rst<CR>:6<CR>i
nnoremap <leader>tman :-1read $HOME/.vim/snippets/skeleton_tawasta_manifest.py<CR>:22<CR>$hi
nnoremap <leader>txml :-1read $HOME/.vim/snippets/skeleton_tawasta_views.xml<CR>jo
nnoremap <PageUp>   :bprevious<CR>
nnoremap <PageDown> :bnext<CR>
"}}}
" COMMANDS{{{
" run xrdb whenever Xdefaults or Xresources are updated.
autocmd BufWritePost *Xresources,*Xdefaults !xrdb %
" set .csv filetype as csv
au! BufNewFile,BufRead *.csv setf csv
" always fold vimrc
au BufRead vimrc normal zM
" clear screen when vim exit
au VimLeave * :!clear
"}}}
" PLUGINS{{{
" LIGHTLINE{{{
let g:lightline = {
      \ 'colorscheme': 'Tomorrow_Night',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
      \            [ 'lineinfo' ],
      \            [ 'percent' ],
      \            [ 'fileformat', 'fileencoding', 'filetype'] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_infos': 'lightline#ale#infos',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right',
      \ }
let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
" }}}
"FZF {{{
set rtp+=/usr/bin/fzf
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
let g:fzf_layout = { 'window': { 'width': 0.4, 'height': 0.6 } }
let g:fzf_layout = { 'down': '40%' }
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }
"}}}
" COC.NVIM{{{
let g:coc_global_extensions = [
      \ 'coc-pairs',
      \ 'coc-python',
      \ 'coc-xml',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-json',
      \ 'coc-tsserver',
      \ 'coc-sh',
      \ 'coc-vimlsp'
      \ ]
" tab for coc.nvim completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" backspace aborts completion
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" :Format formats current buffer
command! -nargs=0 Format :call CocAction('format')
" coc status to statusline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"}}}
" ALE{{{
let g:ale_disable_lsp = 1
let g:ale_fix_on_save = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_python_pylint_executable = 'pylint --load-plugins=pylint_odoo'
let g:ale_linters = {
      \   'python': ['flake8', 'pylint'],
      \   'javascript': ['eslint'],
      \   'xml': ['xmllint'],
      \ }
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'javascript': ['eslint', 'prettier'],
      \   'python': ['autopep8', 'black', 'yapf'],
      \}
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
"}}}
" PYTHON-SYNTAX{{{
let g:python_highlight_all = 1
"}}}
"}}}
