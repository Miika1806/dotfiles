" .vimrc
" by Miika Nissi, https://miikanissi.com, https://github.com/miikanissi
" language specific configs at .vim/ftplugin/<language>.vim
" or .vim/after/syntax/<language>.vim to not override defaults only add to

""" BASICS
set encoding=utf-8
filetype plugin indent on
syntax on
highlight ColorColumn ctermbg=0 guibg=lightgrey
set t_Co=256
colorscheme base16-hopscotch
let g:lightline = {
      \ 'colorscheme': 'simpleblack',
      \ }
let g:airline_theme='base16_hopscotch'
let g:airline_powerline_fonts = 1
" set runtimepath to current dir
let $RTP=split(&runtimepath, ',')[0]
let $RC="$HOME/.vim/vimrc"


""" SETTINGS
set mouse=a                     " enable mouse functionality
set noeb vb t_vb=               " no error bells
set backspace=indent,eol,start  " normal backspace functionality
set hidden                      " hides instead of unloads buffers
set path=.,**                   " path is cur file and dir
set wildmenu                    " tab complete shows all matching files
set nocompatible                " compatibility vim only
set clipboard=unnamedplus       " uses system clipboard
set noerrorbells                " no error bells
set tabstop=4 softtabstop=4     " default tabs
set shiftwidth=4                " default shift
set expandtab                   " default tabs
set smartindent                 " default tabs
set autoindent                  " indents paste
set nu rnu                      " hybrid line numbers
set wrap                        " no wrap
set ignorecase                  " ignores case in search
set smartcase                   " uses smartcase in search
set noswapfile                  " no swap file
set nobackup                    " no backup file
set incsearch                   " incremental search enabled
set ruler                       " ruler shows cur pos
set modelines=0                 " no modelines
set colorcolumn=80              " colorcolumn is 80
set lazyredraw                  " no redraw
set magic                       " magic for regex
set scrolloff=5                 " shows 5 lines under mouse
set matchpairs+=<:>             " highlights matching brackets, '%' to jump between them
set viminfo='100,<9999,s100     " only stores info from 100 files at a time, 9999 lot.
set laststatus=2                " allows lightline to show
set noshowmode                  " -- INSERT -- is not shown as lightline shows it
let skip_defaults_vim=1         " disable viminfo
set viminfo=""                  " disable viminfo
set showcmd                     " shows the typed command
set cmdheight=2                 " more space for command
set foldmethod=indent           " enable folding
set foldlevel=99                " enable folding
set updatetime=300              " default is 4000
set shortmess+=c                " no messages to ins completion
set signcolumn=yes              " always show signcolumns


""" KEY MAPPINGS
" defines leader key as comma
let mapleader = ","
" show buffers
nnoremap <leader>b :buffers<CR>:buffer<Space>
" open nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>
" indent file
nnoremap <leader>i gg=G<C-o><C-o>
" toggle folding
nnoremap <space> za
" open fzf
nnoremap <leader>s :FZF<CR>
" format file with coc-prettier
nnoremap <leader>f :Format<CR>
" snippets
nnoremap <leader>html :-1read $HOME/.vim/snippets/skeleton.html<CR>5jwf>a
nnoremap <leader>cc :-1read $HOME/.vim/snippets/skeleton.c<CR>4ji<tab>
nnoremap <leader>cpp :-1read $HOME/.vim/snippets/skeleton.cpp<CR>4ji<tab>
nnoremap <leader>cred :-1read $HOME/.vim/snippets/skeleton_credits.txt<CR>I
nnoremap <leader>tpy :-1read $HOME/.vim/snippets/skeleton_tawasta_models.py<CR>:35<CR>wi
nnoremap <leader>tmd :-1read $HOME/.vim/snippets/skeleton_tawasta_README.rst<CR>:6<CR>i
nnoremap <leader>tman :-1read $HOME/.vim/snippets/skeleton_tawasta_manifest.py<CR>:22<CR>$hi
nnoremap <leader>txml :-1read $HOME/.vim/snippets/skeleton_tawasta_views.xml<CR>jo


""" COMMANDS
" trim empty lines at the end of file on save
function TrimEndLines()
  if exists('b:noStripWhiteSpace')
    return
  endif
  let save_cursor = getpos(".")
  silent! %s/\($\n\s*\)\+\%$//e
  call setpos('.', save_cursor)
endfunction
autocmd BufWritePre * call TrimEndLines()
autocmd FileType xml let b:noStripWhiteSpace=1
" automatically deletes all trailing whitespace on save.
autocmd BufWritePre * %s/\s\+$//e
" update binds when sxhkdrc is updated.
autocmd BufWritePost *sxhkdrc !pkill -USR1 sxhkd
" run xrdb whenever Xdefaults or Xresources are updated.
autocmd BufWritePost *Xresources,*Xdefaults !xrdb %
" set polybar config filetype as dosini (.ini)
autocmd BufNewFile,BufRead config set filetype=dosini
" terminal commands
command! MakeTags !ctags -R .   " recursively creates ctags in directory
command! Reload execute "source ~/.vim/vimrc"


""" PLUGINS
""" FZF
set rtp+=/usr/bin/fzf
let g:fzf_layout = { 'window': { 'width': 0.4, 'height': 0.6 } }
let g:fzf_layout = { 'down': '40%' }
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }


""" COC.NVIM
let g:coc_global_extensions = [
      \ 'coc-pairs',
      \ 'coc-prettier',
      \ 'coc-python',
      \ 'coc-xml',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-json',
      \ 'coc-sh',
      \ 'coc-vimlsp'
      \ ]
" :Prettier runs prettier for file
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" tab for coc.nvim completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" backspace aborts completion
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" use <cr> to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" :Format formats current buffer
command! -nargs=0 Format :call CocAction('format')
" coc status to statusline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


""" NERDTREE
" automatically open nerdtree if no file specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" automatically open nerdtree if vim is started on a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" close vim if only nerd tree is left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


""" SYNTASTIC
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']


""" PYTHON-SYNTAX
let g:python_highlight_all = 1
