#+STARTUP: overview
#+TITLE: Miika's Emacs
#+CREATOR: Miika Nissi
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
* Installation
=git clone https://github.com/miikanissi/MiikasEmacs ~/.config/emacs=

Make sure to remove your own =~/.emacs=, =~/.emacs.d= and =~/.config/emacs= prior to cloning this configuration. When you launch emacs it will automatically download and setup all packages. To download all-the-icons for doom modeline you might need to run this once to download the icon packages:
=M-x all-the-icons-install-fonts=

This configuration is written in Org-mode and is self documented. 
* Theme
I don't want my eyes to bleed with the default theme.
** Gruvbox
I don't think Gruvbox is the prettiest theme out there, but it is VERY easy on the eyes and I think that's the most important part.
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :init
    (load-theme 'gruvbox-dark-hard t))
#+end_src
* Basic Settings
These are basic default settings that enhance the UI and functionality.
** UTF-8 encoding everywhere
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src
** No startup message
I use a replacement for the default startup menu, =dashboard= package.
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
** Remove menus and scrollbar
I don't use the GUI menus so I get rid of them.
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Better scrolling behavior
By default emacs scrolling jumps multiple lines when you hit the bottom of the screen. This changes the default behavior to a more sane option.
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src
** No ring-bell for errors
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Highlight current line
Very helpful to avoid "losing" your cursor.
#+begin_src emacs-lisp
(when window-system (global-hl-line-mode t))
#+end_src
** Show matching paranthesis
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
** Visual line mode
By default long lines will go off the screen, I like to have them wrap on the next line instead. 
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src
** Prettify symbols
Changes some words into symbols (eg. lambda)
#+begin_src emacs-lisp
(when window-system (global-prettify-symbols-mode t))
#+end_src
** No backups
I don't need backup or autosave files so I disable them. By default emacs creates backup files as =filename~= in the files directory. Better behavior would be to have a seperate directory for all backups but I don't feel the need for it.
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src
** Change yes-or-no to y-or-n
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Subword
By default M-f/M-b treat thisIsOneWord as a single word instead. I want it to consider capitalization as a new word.
 #+begin_src emacs-lisp
   (global-subword-mode 1)
 #+end_src
** Electric
This creates matching paranthesis.
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+end_src
** Buffers
Improve default emacs buffers.
*** Use ibuffer instead of switch-to-buffer
This should be the default option in the first place. 
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
*** Always kill current buffer
Doing =C-x k= should always kill the current buffer by default, for more complicated buffer management I use ibuffer.
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
*** Close all buffers
Sometimes I want to close all buffers to start fresh, this makes it a single command.
#+begin_src emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+end_src
** Line numbers when programming
Having line numbers is very useful when programming.
#+begin_src emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+end_src
* Org
Org was one of the main reasons why I decided to start using Emacs. I will never have to write documents in any other way. Org mode can do it all.
** Common settings
#+begin_src emacs-lisp
(setq org-ellipsis " ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-confirm-babel-evaluate nil)
(setq org-export-with-smart-quotes t)
(setq org-src-window-setup 'current-window)
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** Snippets
Snippets for org mode.
*** src emacs-lisp
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
#+end_src
** Org Bullets
Makes org mode bullets look nicer.
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** Syntax highlighting for HTML export
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src
** Exporting options
One of the reasons that makes org so special is the ability to export files in many different formats.
*** Twitter bootstrap
#+begin_src emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+end_src
* Terminal
I don't usually use the terminal inside emacs, but it is nice to have conveniently available.
** Setting default shell to bash
Emacs asks for the shell you want to use every time you launch the terminal. We can skip that by adding a default shell.
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)
#+end_src
** Open terminal hotkey
I use super+return to open terminal in my Window manager. It makes sense to use a similar binding for emacs terminal. 
#+begin_src emacs-lisp
(global-set-key (kbd "<M-s-return>") 'ansi-term)
#+end_src
* Which key
Which key shows auto-completion for emacs commands.
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src
* Async
Use asynchronous process when possible.
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+end_src
* Sudo edit
Sometimes I want to edit files that need root permissions, this package makes it very easy. Just press a hotkey and select a file to edit as sudo.
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+end_src
* beacon
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src
* IDO
** enable ido mode
#+begin_src emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
#+end_src
** ido vertical mode
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** ido completing read+
Truly enables ido wherever possible.
#+begin_src emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :init
    (ido-ubiquitous-mode 1))
#+end_src
** smex
Enhanced M-x menu.
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init
    (global-set-key (kbd "M-x") 'smex))
#+end_src
* avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Convenient functions
** Kills entire word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c d") 'kill-whole-word)
#+end_src
** Copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w") 'copy-whole-line)
#+end_src
* config edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Rainbow
Rainbow mode colorizes color names in buffers.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-mode)
    (rainbow-mode 1))
#+end_src
Ranbow delimiters mode colorizes matrching paranthesis. Very useful for elisp. 
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (rainbow-delimiters-mode 1))
#+end_src
* dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Miika's Emacs"))
#+end_src
* modeline
** doom modeline
Install and enable doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook
    (after-init . doom-modeline-mode))
#+end_src
** all the icons
Adds extra icons to doom modeline.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src
** Show line/column number on modeline
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
* switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] . switch-window))
#+end_src
* follow window split
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
* Autocompletion
Autocompletion is really nice for programming and most IDEs come with it out of the box. For emacs I use company to do my autocompletion. It needs some configuration to work for different programming languages.
** Install company and basic configuration
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 4))
#+end_src
** Change default company keybindings
#+begin_src emacs-lisp
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+end_src
** C/C++
Irony is what gives us C/C++ completion. First we install the packages and then we add a hook to enable company-mode in C/C++ buffers.
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+end_src
* kill ring
** popup kill ring
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src
